@page "/our-needs"
<h3>Needs</h3>

<MudTable Items="@OrphanageNeeds" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<OrphanageNeed,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="()=>ToggleAdd()">Add New</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Need</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Month</MudTh>
        <MudTh>Target</MudTh>
        <MudTh>Raised</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Type">@context.Type.ToString()</MudTd>
        <MudTd DataLabel="Month">@context.MonthStart.Value.ToString("MMM yyyy")</MudTd>
        <MudTd DataLabel="Target">@context.GetTarget()</MudTd>
        <MudTd DataLabel="Raised">@context.GetRaised()</MudTd>
        <MudTd>
            <MudButton OnClick="()=>ToggleAdd(true,context)" Variant="Variant.Filled" Color="Color.Success">Edit</MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />
</div>
@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private OrphanageNeed selectedItem1 = null;
    [CascadingParameter] Task<AuthenticationState> authenticationState { get; set; }
    private HashSet<OrphanageNeed> selectedItems = new HashSet<OrphanageNeed>();

    private IEnumerable<OrphanageNeed> OrphanageNeeds = new List<OrphanageNeed>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    async Task LoadData()
    {
        var user = (await authenticationState).User;
        if (user.Identity.IsAuthenticated && user.IsInRole("Orphanage"))
        {
            OrphanageNeeds = await orphanageNeedService.GetAllByEmail(user.Identity.Name);
            StateHasChanged();
        }
        else
        {
            Navigation.NavigateTo("/");
        }

    }
    public async void ToggleAdd(bool edit = false, OrphanageNeed record = null)
    {

        DialogOptions midWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.Center, DisableBackdropClick = true };
        if (!edit)
        {
            var dialog = dialogService.Show<AddEditDialog>("Add Needs");
            var res = await dialog.Result;
            if (!res.Cancelled)
            {
                await LoadData();

            }
        }
        else
        {
            var parms = new DialogParameters { ["Model"] = record, ["IsEditing"] = true };
            var dialog = dialogService.Show<AddEditDialog>("Add Needs", parms);
            var res = await dialog.Result;
            if (!res.Cancelled)
            {
                await LoadData();
            }
        }

    }
    private bool FilterFunc1(OrphanageNeed orphanageNeed) => FilterFunc(orphanageNeed, searchString1);

    private bool FilterFunc(OrphanageNeed orphanageNeed, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (orphanageNeed.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (orphanageNeed.Type.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{orphanageNeed.MonthStart}".Contains(searchString))
            return true;
        return false;
    }
}