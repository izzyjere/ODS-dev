@page "/my-donations"
<MudTable Items="@DonationsList"  Filter="new Func<Donation,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">My Donations</MudText>
        <MudSpacer />
        <MudButton OnClick="Donate" Variant="Variant.Filled" Color="Color.Secondary">
            Donate Now
        </MudButton>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>No.</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Donated To</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Quantity</MudTh>
        <MudTh>Amount</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Date">@context.Date.ToString("dd MMM yyyy H:mm")</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Orphanage.Name">@context.Orphanage?.Name</MudTd>       
        <MudTd DataLabel="Quantity">@context.Quantity</MudTd>      
        <MudTd DataLabel="Actions">
            <MudButton Color="Color.Info" Variant="Variant.Outlined">More Details></MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {

    private string searchString1 = "";
    private Donation selectedItem1 = null;
    private HashSet<Donation> selectedItems = new HashSet<Donation>();
    [CascadingParameter] Task<AuthenticationState> authenticationState { get; set; }
    ClaimsPrincipal claimsPrincipal = new();
    private IEnumerable<Donation> DonationsList = new List<Donation>();
    Donor donor = new();
    protected override async Task OnInitializedAsync()
    {
        claimsPrincipal = (await authenticationState).User;
        donor = await donorService.GetByUserId(claimsPrincipal.GetGuid());
        DonationsList = donor.Donations;

    }
    async void Donate ()
    {
        DialogOptions midWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.Center, DisableBackdropClick = true };
        var dialog = dialogService.Show<DonateDialog>("Donate");
        var res = await dialog.Result;
        if(!res.Cancelled)
       {
            donor = await donorService.GetByUserId(claimsPrincipal.GetGuid());
            DonationsList = donor.Donations;
             StateHasChanged();
        }
    }

    private bool FilterFunc1(Donation donation) => FilterFunc(donation, searchString1);

    private bool FilterFunc(Donation donation, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (donation.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (donation.Date.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)) 
            return true;
        return false;
    }
}