@page "/our-donations"
<h3>Donations</h3>
<MudTabs Border="true">
    @if (Model != null)
    {
        <MudTabPanel Text="Monetary Donations">
            <MudTable Items="@MoneyD" Filter="new Func<Payment,bool>(FilterFunc2)">
                <ToolBarContent>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>No.</MudTh>
                    <MudTh>Transaction Id</MudTh>
                    <MudTh>Date</MudTh>
                    <MudTh>Donated By</MudTh>
                    <MudTh>Payment Method</MudTh>
                    <MudTh>Reference</MudTh>
                    <MudTh>Amount</MudTh>
                    <MudTh>Get In Touch</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="TransactioId">@context.</MudTd>
                    <MudTd DataLabel="Date">@context.Date.ToString("dd MMM yyyy H:mm")</MudTd>
                    <MudTd DataLabel="Description">@context.Donor.Name</MudTd>
                    <MudTd DataLabel="PaymentMethod">@context.PaymentMethod.ToString()</MudTd>
                    <MudTd DataLabel="Reference">@context.TransactionRef</MudTd>
                    <MudTd DataLabel="Amount">@context.Amount.ToString("N2")</MudTd>
                    <MudTd DataLabel="GetInTouch">
                        <MudButton Link='@($"tel:{context.Donor.PhoneNumber}")' StartIcon="@Icons.Material.Filled.Call" Color="Color.Info" Variant="Variant.Outlined">@context.Donor.PhoneNumber</MudButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>

        </MudTabPanel>
        <MudTabPanel Text="Item Donations">
            <MudTable Items="@ItemsD" Filter="new Func<Donation,bool>(FilterFunc1)">
                <ToolBarContent>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>No.</MudTh>
                    <MudTh>Date</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh>Donated By</MudTh>                 
                    <MudTh>Quantity</MudTh>
                    <MudTh>Get In Touch</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="Date">@context.Date.ToString("dd MMM yyyy H:mm")</MudTd>
                    <MudTd DataLabel="Description">@context.Description</MudTd>
                    <MudTd DataLabel="Donor.Name">@context.Donor.Name</MudTd>                 
                    <MudTd DataLabel="Quantity">@context.Quantity</MudTd>                   
                    <MudTd DataLabel="Get In Touch">
                        <MudButton Link='@($"tel:{context.Donor.PhoneNumber}")' StartIcon="@Icons.Material.Filled.Call" Color="Color.Info" Variant="Variant.Outlined">@context.Donor.PhoneNumber</MudButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudTabPanel>
    }
    else
    {
        <MudAlert Severity="Severity.Info" Class="m-6">No danations yet.</MudAlert>
    }
</MudTabs>
@code {

}

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private Donation selectedItem1 = null;
    private HashSet<Donation> selectedItems = new HashSet<Donation>();
    Orphanage Model { get; set; } = new();
    private IEnumerable<Donation> Donations = new List<Donation>();
    [CascadingParameter] Task<AuthenticationState> authState { get; set; }
    ClaimsPrincipal claimsPrincipal = new();
    protected override async Task OnInitializedAsync()
    {
        await Init();
    }
    IEnumerable<Payment> MoneyD = Enumerable.Empty<Payment>();
    IEnumerable<Donation> ItemsD = Enumerable.Empty<Donation>();
    async Task Init()
    {
        claimsPrincipal = (await authState).User;
        if (claimsPrincipal.Identity.IsAuthenticated)
        {
            if (claimsPrincipal.IsInRole("Orphanage"))
            {
                Model = await orphanageService.GetByEmail(claimsPrincipal.Identity.Name);
                if (!Model.IsActive)
                {
                    Navigation.NavigateTo("/");
                }
                
                ItemsD = Model.Donations;

            }
        }
        else
        {
            Navigation.NavigateTo("/");
        }

    }
    private bool FilterFunc1(Donation donation) => FilterFunc(donation, searchString1);
    private bool FilterFunc2(Payment donation) => FilterFunc3(donation, searchString1);

    private bool FilterFunc(Donation donation, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (donation.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;        
        return false;
    } 
    private bool FilterFunc3(Payment donation, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (donation.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (donation.FWReference.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;        
        return false;
    }
}