<MudDialog>
    <DialogContent>
        <MudTabs Border="true">
            <MudTabPanel Text="Monetary">
                <EditForm Model="@Model" OnValidSubmit="Complete">
                    <DataAnnotationsValidator />
                    <MudGrid Spacing="3">
                        <MudItem xs="12">
                            <MudSelect ReadOnly="@editing" T="int" @bind-Value="Model.OrphanageId" Variant="Variant.Outlined" Label="Orphange">
                                <MudSelectItem Value="0">Select orphanage</MudSelectItem>
                                @foreach (var item in orphanages)
                                {
                                    <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12">
                            <MudChip Label="true" Class="mb-3" Variant="Variant.Text" Color="Color.Info" Icon="@Icons.Material.Filled.Payment">Choose Payment Method</MudChip>
                            <MudRadioGroup T="PaymentMethod" @bind-SelectedOption="@Model.PaymentMethod">
                                <MudGrid Justify="Justify.SpaceBetween">
                                    @foreach (var item in (PaymentMethod[])Enum.GetValues(typeof(PaymentMethod)))
                                    {
                                        <MudItem xs="4">
                                            <MudRadio title="@item.ToDescriptionString()" Option="@item" Color="Color.Primary">
                                                <MudImage Width="50" Height="50" Alt="@item.ToString()" Src="@($"assets/img/gallery/{item.ToString()}.png")"></MudImage>
                                            </MudRadio>
                                        </MudItem>
                                    }
                                </MudGrid>
                            </MudRadioGroup>
                        </MudItem>
                        <MudItem xs="12">
                            <MudNumericField Variant="Variant.Outlined"
                                             @bind-Value="@Model.Amount"
                                             T="decimal"
                                             Min="0"
                                             Label="Amount in Kwacha"
                                             Clearable="true" />                           
                        </MudItem>                      
                        <MudItem xs="12">
                            <MudButton @onclick="ProcessPayment" Color="Color.Primary" Variant="Variant.Filled">Pay Now</MudButton>
                        </MudItem>                      
                    </MudGrid>
                </EditForm>
            </MudTabPanel>
            <MudTabPanel Text="Items">
                <EditForm Model="@Model2" OnValidSubmit="Complete">
                    <DataAnnotationsValidator />
                    <MudGrid Spacing="3">
                        <MudItem xs="12">
                            <MudTextField @bind-Value="Model2.Description" Variant="Variant.Outlined" Label="Item Description" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="Model2.Quantity" Variant="Variant.Outlined" Label="Quantity" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudSelect ReadOnly="@editing" T="int" @bind-Value="Model2.OrphanageId" Variant="Variant.Outlined" Label="Orphange">
                                <MudSelectItem Value="0">Select orphanage</MudSelectItem>
                                @foreach (var item in orphanages)
                                {
                                    <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                </EditForm>
            </MudTabPanel>
        </MudTabs>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton OnClick="Donate" IconColor="Color.Error" StartIcon="@Icons.Material.Filled.Favorite" Variant="Variant.Filled">Donate</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance Dialog { get; set; }
    [CascadingParameter] Task<AuthenticationState> authenticateTask { get; set; }
    Payment Model { get; set; } = new();
    [Parameter] public int Oid { get; set; }  
    List<Orphanage> orphanages = new();
    ClaimsPrincipal claimsPrincipal = new();
    Donation Model2 { get; set; } = new();
    Donor donor = new();
    bool editing = false;   
    protected override async Task OnInitializedAsync()
    {
        claimsPrincipal = (await authenticateTask).User;
        donor = await donorService.GetByUserId(claimsPrincipal.GetGuid());
        orphanages = await orphanageService.GetAll();
        if (Oid > 0)
        {
            Model2.OrphanageId = Oid;
            editing = true;
        }
        if (donor != null)
        {
            Model.FirstName = donor.FirstName;
            Model.LastName = donor.LastName;
            Model.Email = donor.Email;
            Model.Phone = donor.PhoneNumber;
        }
        else
        {
            Dialog.Cancel();
        }

    }
    [JSInvokable]
    public async Task VerifyPayment(string paymentResponse)
    {   
        var response = JsonConvert.DeserializeObject<PaymentResponse>(paymentResponse);
        if (response!=null && response.Stutus == "successful")
        {   
            //Send Email ETC
            Model.FWReference = response.FWReference;         
            Model.Phone = response.Customer.PhoneNumber;
            Model.Date = DateTime.Now;
            //save to db
            var res = await paymentService.Create(Model);
            if (res.Succeeded)
            {
                snackBar.Add("Payment Complete", Severity.Success);
                Dialog.Close();
            }
            else
            {
                snackBar.Add("Payment was complete but something went wrong at our end.", Severity.Warning);

            }
        }
        else
        {
            snackBar.Add("Payment Failed.", Severity.Error);
        }
        
    }
    async void ProcessPayment()
    {
        if (Model.Amount<1)
        {
            snackBar.Add("Please enter a valid amount", Severity.Error);
            return;
        }
        var request = new PaymentRequest
            {

                Amount = Model.Amount,
                FirstName = Model.FirstName,
                LastName = Model.LastName,
                Email = donor.Email,
                Phone = Model.Phone,
                Orphanage = orphanages.FirstOrDefault(x => x.Id == Model.OrphanageId)?.Name,
                DonorId = donor.Id,
                OrphanageId = Model.OrphanageId,
                PaymentMethod = Model.PaymentMethod
            };
        string PbKey = "FLWPUBK_TEST-ac089c74f98cae65498954abcd767b3f-X";
        try
        {
            await javaScript.InvokeAsync<object>("makePayment", PbKey, request.Amount, request.TransactionRef, request.DonorId, request.OrphanageId, donor.Name, request.Phone, donor.Email, request.Orphanage, $"{Navigation.BaseUri}/assets/img/icon/xfavicon.png.pagespeed.ic.YvM5dLVeS6.png", DotNetObjectReference.Create(this));
            snackBar.Add("Payment Initiated",Severity.Success);

        }
        catch (Exception ex)
        {
            WriteLine(ex.Message + ex.StackTrace);
            snackBar.Add("An error occured, try again",Severity.Error);
        }

        StateHasChanged();

    }    
    async void Complete()
    {


    }
    async void Donate()
    {
        if (string.IsNullOrEmpty(Model2.Description) || string.IsNullOrEmpty(Model2.Quantity.ToString()))
        {
            snackBar.Add("Enter all required fields");
            return;
        }
        Model2.DonorId = donor.Id;
        Model2.Date = DateTime.Now;    

        var res = await donationService.Create(Model2);
        if (res.Succeeded)
        {
            snackBar.Add("Thank you.");
            Dialog.Close();
        }
        else
        {
            snackBar.Add("Something went wrong.");
        }

    }
    void Cancel() => Dialog.Cancel();
}
